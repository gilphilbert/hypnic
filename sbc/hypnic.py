#!/usr/bin/python3

# ------------------------------------------------- #
#               DO NOT EDIT THIS FILE               #
# ------------------------------------------------- #
# If you wish to modify the pins used, please run   #
#    hypnic.py                                      #
# ------------------------------------------------- #

from configparser import ConfigParser
import RPi.GPIO as GPIO
import os
import sys
import getopt
import signal

if os.geteuid() != 0:
    exit("You need to have root privileges to run this script.\nPlease try again, this time using 'sudo'. Exiting.")

# first read the current config
parser = ConfigParser()
parser.read('/etc/hypnic.conf')

def setPins():
    print("\n\nCurrent pin configuration:")
    print("  HALT pin:", parser.getint("pins", "halt_pin"))
    print("  SAFE pin:", parser.getint("pins", "safe_pin"))
    print("")
    res = input("Which pin do you wish to change, halt or safe? (h/s): ")
    while (res != "h" and res != "s"):
        print("Invalid selection\n")
        res = input("Which pin do you wish to change, halt or safe? (h/s): ")
    print("")
    if (res == "h"):
        pinName = "HALT"
        pinVar = "halt_pin"
    else:
        pinName = "SAFE"
        pinVar = "safe_pin"
    print("Changing", pinName, "pin")
    res = input("What is the new BCM GPIO pin (not the physical pin)? ")
    valid = False
    while (valid == False):
        try:
            resi = int(res)
            valid = True
        except:
            print("Invalid pin selected\n")
            res = input("What is the new BCM GPIO pin (not the physical pin)? ")
    
    parser["pins"][pinVar] = res
    with open('/etc/hypnic.conf', 'w') as configfile:
        parser.write(configfile)
    setPins()

def configure():
    pin = ""
    print("\n----------------------------------")
    print("Hypnic Power Manager configuration")
    print("----------------------------------")
    print("\nPress CTRL+C at any time to exit")
    setPins()

def powerOff(channel):
    print("Powering off...")
    os.system("sudo shutdown -h now")

def startDaemon():
    import time
    HALT_PIN = parser.getint("pins", "halt_pin")
    try:
        # for RPi, use BCM mode
        GPIO.setmode(GPIO.BCM)
        # configure the pin to use pullup mode (hypnic will pull this pin down to ground)
        GPIO.setup(HALT_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        # if the pin falls, call the powerdown command
        GPIO.add_event_detect(HALT_PIN, GPIO.FALLING, callback=powerOff)

        # sleep for 5ms each loop to prevent wasting CPU time
        while True:
            time.sleep(5)

    finally:
        # clean GPIOs when we die
        GPIO.cleanup()


def main(argv):
   inputfile = ''
   outputfile = ''
   isDaemon = False
   try:
      opts, args = getopt.getopt(argv,"hd",[])
   except getopt.GetoptError:
      print("Usage: hypnic.py [-d]")
      sys.exit(2)
   for opt, arg in opts:
      if opt == '-h':
         print("Usage: hypnic.py [-d]")
         sys.exit()
      elif opt in ("-d"):
         isDaemon = True
   if (isDaemon):
       startDaemon()
   else:
       configure()

def signal_handler(sig, frame):
    print("\n\nRestarting services...")
    os.system("systemctl stop hypnic")
    os.system("systemctl start hypnic")
    print("Goodbye!\n")
    sys.exit(0)
signal.signal(signal.SIGINT, signal_handler)

if __name__ == "__main__":
    main(sys.argv[1:])
